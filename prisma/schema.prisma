datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @unique @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  // oauth2.0
  access_token        String? @db.String
  refresh_token        String? @db.String
  // oauth1.0
  // oauth_token        String? @db.String
  // oauth_token_secret String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  themes        String? 
  role          String? 
  tweetContent  String? 
  tweetStyle    String? 
  TweetSchedule Tweet[]
  accounts      Account[]
  sessions      Session[]
}

model Tweet {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  date    DateTime
  title   String
  content String
  status  String
  userId  String   @db.ObjectId
  user    User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }
